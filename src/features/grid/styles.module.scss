body.grabbing * {
  cursor: -webkit-grabbing !important;
}

body.scroll-dragging {
  user-select: none;
}

.root {
  @include absolute(0);
  @include size(100%);
  overflow-x: auto;
  overflow-y: hidden;

  &.root--preview {
    overflow-x: hidden;
  }

  // Hide the actual scrollbar
  scrollbar-width: none;
  -ms-overflow-style: none;
  -webkit-overflow-scrolling: touch;
  &::-webkit-scrollbar {
    display: none;
  }
}

.scrollbar-wrapper {
  $scrollbar-height: sz(8);
  @include fixed(x x sz(4) 50%);
  border: 1px solid c('border');
  border-radius: sz(1.5);
  height: $scrollbar-height;
  transform: translateX(-50%);
  max-width: sz(96);
  overflow: hidden;
  // If height is capped at $scrollbar-height,
  // Calculate the ratio of width:height and multiply by the capped height
  width: calc((var(--grid-width) / var(--grid-height)) * #{$scrollbar-height});
}

.scrollbar__inner {
  @include absolute(0 x x 0);
  @include size(100%);
}

.scrollbar__svg {
  @include size(100%);
  display: block;
}

.scrollbar__thumb {
  fill: currentColor;

  g & {
    color: c('border', 0.5);
  }
}

.scrollbar__grid-item {
  fill: currentColor;

  g & {
    color: c('border', 0.5);
  }

  &.scrollbar__grid-item--moving {
    opacity: 0.75;
  }
}

.grid {
  .root:not(.root--preview) & {
    // Place the grid vertically in the root container
    @include margin(sz(8) x sz(16));
  }

  // Set the width and height based on the grid size and unit px size
  height: calc(var(--grid-height) * var(--unit-px));
  width: calc(var(--grid-width) * var(--unit-px));

  position: relative;

  // Render the bottom line, since the bg-image doesn't do so!
  border-bottom: currentColor 1px solid;
  color: transparent;

  &::before,
  &::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;

    // Render the grid texture
    background-image: linear-gradient(to right, currentColor 1px, transparent 1px),
      linear-gradient(to bottom, currentColor 1px, transparent 1px);

    // Render the grid at the even unit px size (for crisp lines) at the chosen step (e.g., 1/2, 1, 2)
    background-size: calc(var(--even-unit-px) * var(--grid-step))
      calc(var(--even-unit-px) * var(--grid-step));

    // Scale the element so even-unit-px is now the same size as unit-px
    transform: scale(var(--scale));
    transform-origin: 0 0;

    // Then apply the inverse scale of the width and height so it takes up the full container size
    width: calc(100% * (1 / var(--scale)));
    height: calc(100% * (1 / var(--scale)));
  }

  &::before {
    // Render any user-chosen step at half opacity
    opacity: 0.5;
  }

  &::after {
    // Always render the base 1 step at full opacity
    --grid-step: 1;
  }

  // If the grid step is larger than 1, only render the before grid at full opacity
  &.grid--large {
    &::before {
      opacity: 1;
    }

    &::after {
      display: none;
    }
  }
}

.item {
  position: absolute;
  left: calc(var(--item-grid-x) * var(--unit-px));
  top: calc(var(--item-grid-y) * var(--unit-px));

  width: calc(var(--item-grid-width) * (var(--unit-px)));
  height: calc(var(--item-grid-height) * (var(--unit-px)));
  z-index: 2;
}

.movable--active {
  position: fixed;
  z-index: 100;
  transform: translate(calc(var(--item-delta-x) * 1px), calc(var(--item-delta-y) * 1px));
}

.drag-handle-instructions {
  display: none;
}

:export {
  varGridYMargin: sz(8, $convert: 'px');
}
